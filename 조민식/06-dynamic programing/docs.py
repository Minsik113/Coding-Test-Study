'''
1.그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
2.안떠오르면 DP를 고려해보자.
  완전탐색 -> (시간초과) -> 다이나믹프로그래밍

😍DP vs 분할 정복
1. 공통점 
-> 모두 최적 부분 구조를 가질 때 사용할 수 있다.
  큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황

2. 차이점 
-> 부분 문제의 중복
  DP는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
  분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.

😍메모이제이션(Memoization)
:메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미한다.
- 메모이제이션은 DP에만 국한된게아님.
    - 한 번 계산된 결과를 담아 놓고 사용하면 메모이제이션을 쓴거임
- 한 번 계산한 결과를 메모리 공간에 메모하는 기법이다.
  - 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다.
  - 값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 한다.

😍DP(Dynamic Programming) = 동적 계획법
:자료구조에서 동적할당은 '프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'을 의미한다.
즉, 메모리가 필요할 때마다 프로그램이 실행되는 도중에 할당하는 기법이다.
반면에, 다이나믹 프로그래밍에서 '다이나믹'은 별다른 의미 없이 사용된 단어이다.

😀정의
다이나믹 프로그램이은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법이다.

😀특징
- 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
- 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운, 보텀업)으로 구성된다.

1. 최적 부분 구조(Optimal Substructure)
  큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결한다.
2. 중복되는 부분 문제(Overlapping Subproblem)
  동일한 작은 문제를 반복적으로 해겨해야 한다.

=> 다이나믹 프로그래밍에서 각각의 값을 저장하기위해서 배열이나 리스트에 저장한다.

😀종류
탑다운(하향식) / 보텀업(상향식)방식 사용
  
😀1. 탑다운(하향식) 
:큰 문제를 해결하기위해 작은 문제를 호출
->재귀사용
- 재귀보다 반복문을 권장해서 잘 안씀 -> sys.setrecursionlimit()을 호출.
- 메모아이제이션

😀2. 보텀업(상향식) - 일반적으로 사용
:단순 반복문을 이용하여 작은 문제부터 해결하고, 작은문제 조합해서 앞으로의 큰 문제 해결
-> 반복문사용

'''